"0","month_columns <- c(""october_2022"", ""november_2022"", ""december_2022"","
"0","                   ""january_2023"", ""february_2023"", ""march_2023"", ""april_2023"","
"0","                   ""may_2023"", ""june_2023"", ""july_2023"", ""august_2023"", ""september_2023"")"
"0",""
"0","december_year <- 2022"
"0",""
"0","# defining global variables for the fuel codes "
"0","elect_code <- c(""0001"", ""0002"", ""0086"")"
"0","renew_code <- c(""0003"", ""0004"", ""0009"", ""0010"", ""0111"", ""0125"", ""0123"", ""0127"", ""0128"", ""0130"")"
"0","diesl_code <- c(""0063"", ""0113"")"
"0","fuelo_code <- c(""0024"", ""0025"", ""0103"", ""0110"", ""0112"")"
"0","natga_code <- c(""0041"", ""0042"", ""0043"", ""0044"", ""0045"", ""0046"", ""0114"", ""0134"")"
"0","propa_code <- c(""0030"", ""0105"", ""0029"", ""0104"", ""0124"", ""0133"", ""0674"")"
"0","npowa_code <- c(""0074"", ""0094"", ""0135"")"
"0","powat_code <- c(""0075"", ""0076"", ""0077"", ""0078"", ""0080"", ""0095"", ""0401"", ""0445"")"
"0","wood_code <- c(""0106"", ""0107"")"
"0","b20_code <- ""0120"""
"0",""
"0","# set the percent threshold for consumption estimation "
"0","consumptionThreshold <- 25"
"0",""
"0","#Change to current year's filepath"
"0","meterdata_filepath <- here(""FBMS_Data.xlsx"")"
"0",""
"0","meter_data <- read_xlsx(meterdata_filepath,"
"0","                        skip = 5,"
"0","                        na = c(""NULL"", ""#"")) %>%"
"0","  clean_names() %>%"
"0","  select(-c(2, 5, 9, 28)) %>% mutate(Location = substring(`maximo_id`, 2))"
"2","New names:"
"0","meter_data <- meter_data %>%"
"0","  mutate("
"0","    energy_type_mapped = case_when("
"0","      energy_type %in% diesl_code ~ ""DIESL"","
"0","      energy_type %in% fuelo_code ~ ""FUELO"","
"0","      energy_type %in% natga_code ~ ""NATGA"","
"0","      energy_type %in% propa_code ~ ""PROPA"","
"0","      energy_type %in% wood_code ~ ""WOOD"","
"0","      energy_type == b20_code ~ ""B-20"","
"0","      TRUE ~ ""UNMAPPED""  # Mark unmapped energy types"
"0","    )"
"0","  )"
"0",""
"0","meter_data <- meter_data %>%"
"0","  mutate("
"0","    consumption = case_when("
"0","      # Natural Gas conversions"
"0","      energy_type_mapped == ""NATGA"" & unit == ""MCF""  ~ consumption,"
"0","      energy_type_mapped == ""NATGA"" & unit == ""CF""   ~ consumption / 1000,"
"0","      energy_type_mapped == ""NATGA"" & unit == ""TGAL"" ~ consumption * 0.1337,"
"0","      "
"0","      # Diesel (DIESL) TGAL -> GAL"
"0","      energy_type_mapped == ""DIESL"" & unit == ""TGAL"" ~ consumption * 1000,"
"0","      "
"0","      # Fuel Oil (FUELO) TGAL -> GAL"
"0","      energy_type_mapped == ""FUELO"" & unit == ""TGAL"" ~ consumption * 1000,"
"0","      "
"0","      # Propane (PROPA) TGAL -> GAL"
"0","      energy_type_mapped == ""PROPA"" & unit == ""TGAL"" ~ consumption * 1000,"
"0","      "
"0","      # Biodiesel (B-20) TGAL -> GAL"
"0","      energy_type_mapped == ""B-20"" & unit == ""TGAL""  ~ consumption * 1000,"
"0","      "
"0","      # Otherwise leave consumption unchanged"
"0","      TRUE ~ consumption"
"0","    ),"
"0","    "
"0","    unit = case_when("
"0","      # Always convert NATGA to MCF"
"0","      energy_type_mapped == ""NATGA"" ~ ""MCF"","
"0","      "
"0","      # For any of these fuel types, if unit was TGAL, rename to GAL"
"0","      energy_type_mapped %in% c(""DIESL"", ""FUELO"", ""PROPA"", ""B-20"") & unit == ""TGAL"" ~ ""GAL"","
"0","      "
"0","      # Otherwise keep the existing unit"
"0","      TRUE ~ unit"
"0","    )"
"0","  )"
"0",""
"0",""
"0","gis_info <- read_xlsx(here(""gis_data.xlsx""), sheet = 'Sheet1', skip = 4) %>% select(Location, Occupant, `Asset Ownership`)"
"0",""
"0","meter_data <- left_join(meter_data, gis_info, by = ""Location"")"
"0",""
"0","meter_data <- meter_data %>%"
"0","  filter(!energy_type_mapped %in% c(""ELECT"", ""UNMAPPED"")) %>% filter(unit != ""FLAT RATE"")"
"0",""
"0",""
"0","meter_data <- meter_data %>%"
"0","  mutate(Location = substr(maximo_id, 2, nchar(maximo_id)))"
"0",""
"0","meter_data <- meter_data %>%"
"0","  mutate("
"0","    # Adjust consumption if itâ€™s in thousands of gallons"
"0","    consumption = case_when("
"0","      grepl(""THOU\\.GAL"", energy_type_description) ~ consumption * 1000,"
"0","      TRUE ~ consumption"
"0","    ),"
"0","    "
"0","    # Remap the 'energy_type_mapped' column based on description"
"0","    energy_type_mapped = case_when("
"0","      grepl(""DISTILLATE FUEL OIL NO\\. 1"", energy_type_description) ~ ""FUELO1"","
"0","      grepl(""DISTILLATE FUEL OIL NO\\. 2"", energy_type_description) ~ ""FUELO2"","
"0","      grepl(""GASOLINE"", energy_type_description)                     ~ ""GAS"","
"0","      grepl(""KEROSENE"", energy_type_description)                     ~ ""KEROSENE"","
"0","      TRUE ~ energy_type_mapped  # for anything else, keep the old value"
"0","    )"
"0","  )"
